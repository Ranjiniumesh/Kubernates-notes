helm is package manager for k8s
installation steps
https://helm.sh/docs/intro/install/

helm create jenkins

helm template jenkins ./jenkins

helm install jenkins ./jenkins --dry-run

helm install jenkins ./jenkins

helm install jenkins ./jenkins --dry-run

helm install --create-namespace jenkins ./jenkins --namespace jenkins

helm uninstall jenkins

helm upgrade jenkins ./jenkins --set replicas=4

helm getl all
helm history revision-name(application-name)
helm roleback release revision-name
helm package revision-name
helm repo list
helm repo pull name-repo


important links
1. https://github.com/hmcts/chart-java
2. https://github.com/stakater-charts/java-app

1. What is Helm
Helm is a package manager for Kubernetes that simplifies the deployment and management of applications on Kubernetes clusters.
It helps to automate the installation, upgrading, and removal of applications by providing templating and packaging mechanisms for Kubernetes manifests.

2.What is a Helm chart, and how is it structured?
A Helm chart is a package containing pre-configured Kubernetes manifests that describe an application's resources and dependencies. 
It consists of a directory structure containing files such as Chart.yaml (metadata), values.yaml (configuration values), 
templates (Kubernetes manifests with Helm templating), and optionally, helper files and scripts

3.What is the purpose of Helm values files?
Helm values files (values.yaml) contain configuration values that override the default settings defined in the Helm chart templates. 
They allow users to customize the behavior of the application deployed with Helm without modifying the chart itself.

4.what is the difference between helm 2 and helm 3?
1.Removal of Tiller -In Helm 2, Tiller (the server-side component) was responsible for managing releases. However, in Helm 3,
Tiller has been removed entirely. Now, Helm operates directly with Kubernetes APIs.
2.Requirements.yaml Moved to Chart.yaml -In Helm 2, dependencies were defined in requirements.yaml. In Helm 3, dependencies are specified directly in Chart.yaml.
3.Changes in Chart apiVersion -Helm 3 uses apiVersion: v2 for charts, while Helm 2 used apiVersion: v1.

How to create helm?

HELM- In simple term, helm is package manager in for k8s. helm is the k8s equivalent of yum or apt.
Helm deploy charts, which we can think of as a packaged application. It is collection of all your versioned, pre-configured application resources which can be deployed as a one unit.
Helm helps in three ways:
Improves productivity.
Reduces the complexity of deployment of microservices
Enables the adoption of cloud native application.
Helm chars are k8s yaml/manifest combined into a single package the can advantaged to k8s cluster

Helm there are three concepts we are familiar with.
Chart- a package of pre-configured k8s resources.
Release- a specific instant of chart which has been deployed to the cluster using helm.
Repository – a group of public charts which can be made available to others.

How to create helm?
Helm create [application name]
Chart.yaml- this is where all information about the chat your packaging. So for example your version number/name of the application etc. this is where you put the details.
Charts- this is where u store other charts that your charts depend on. You might be calling other chart need to functions properly.
Template- this folder where u put actual manifest [yaml file] you are deploying the chat.
Example – you might be deploying nginx deployment that needs a service, config map & secretes.
You will have deployment yaml, service yaml, all in the template’s directory this will get their values from values .yaml file
Values: - this is where you define all the values you want to inject into your templates.
{{.Values.deploy_name}}

















